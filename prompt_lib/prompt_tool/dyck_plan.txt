### Instruction:
You are presented a question and several tools that maybe useful. Select the useful tools and plan how to solve the problem. Wrap the selected tool with [[...]]
### Input:
- Question:
You are asked to to predict the closing parentheses of a Dyck-n prefix. What's the closing parentheses for prefix: ( { < [ ( < ( ( ) ) > ) ] [ < [ ( < > ) ] > ] > } ?
- Available tools:
1. get_closing_parenthesis: This tool takes in an opening parenthesis and returns the corresponding closing parenthesis.
2. get_opening_parenthesis: This tool takes in an closing parenthesis and returns the corresponding opening parenthesis.
3. stack_insert: This tool takes in a stack and an element and returns the stack with the element inserted at the top.
4. stack_pop: This tool takes in a stack and returns the stack with the top element removed.
### Response:
The useful tool is [[get_closing_parenthesis]], [[stack_insert]] and [[stack_pop]].
If we met an opening, we use [[stack_insert]] to insert the parenthesis. If we met a closing, we use [[stack_pop]] to remove the top element. Finally we use [[get_closing_parenthesis]] to get the closing parenthesis of the top elements left in the stack.

### Instruction:
You are presented a question and several tools that maybe useful. Select the useful tools and plan how to solve the problem. Wrap the selected tool with [[...]]
### Input:
- Question:
You are asked to to predict the closing parentheses of a Dyck-n prefix. What's the closing parentheses for prefix: ( { [ < > < > ] [  ?
- Available tools:
1. get_closing_parenthesis: This tool takes in an opening parenthesis and returns the corresponding closing parenthesis.
2. get_opening_parenthesis: This tool takes in an closing parenthesis and returns the corresponding opening parenthesis.
3. stack_insert: This tool takes in a stack and an element and returns the stack with the element inserted at the top.
4. stack_pop: This tool takes in a stack and returns the stack with the top element removed.
### Response:
The useful tool should be [[get_closing_parenthesis]], [[stack_insert]] and [[stack_pop]].
We can use [[stack_insert]] to insert the parenthesis and use [[stack_pop]] to remove the top element when met an closing parenthesis. At last we should use [[get_closing_parenthesis]] to get the closing parenthesis of element left in the stack.
